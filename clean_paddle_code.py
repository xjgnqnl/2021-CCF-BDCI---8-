import paddle
import math
from x2paddle.op_mapper.onnx2paddle import onnx_custom_layer as x2paddle_nn

class ONNXModel(paddle.nn.Layer):
    def __init__(self):
        super(ONNXModel, self).__init__()
        self.x2paddle_cls_head_fc_cls_weight = self.create_parameter(shape=[30, 512], attr='x2paddle_cls_head_fc_cls_weight', dtype='float32', default_initializer=paddle.nn.initializer.Constant(value=0.0))
        self.x2paddle_cls_head_fc_cls_bias = self.create_parameter(shape=[30], attr='x2paddle_cls_head_fc_cls_bias', dtype='float32', default_initializer=paddle.nn.initializer.Constant(value=0.0))
        self.x2paddle_578 = self.create_parameter(shape=[1], attr='x2paddle_578', dtype='int64', default_initializer=paddle.nn.initializer.Constant(value=0.0))
        self.x2paddle_579 = self.create_parameter(shape=[1], attr='x2paddle_579', dtype='int64', default_initializer=paddle.nn.initializer.Constant(value=0.0))
        self.x2paddle_580 = self.create_parameter(shape=[1], attr='x2paddle_580', dtype='int64', default_initializer=paddle.nn.initializer.Constant(value=0.0))
        self.conv0 = paddle.nn.Conv3D(in_channels=25, out_channels=32, kernel_size=[1, 7, 7], padding=[0, 3, 3])
        self.relu0 = paddle.nn.ReLU()
        self.pool0 = paddle.nn.MaxPool3D(kernel_size=[1, 3, 3], stride=1, padding=[0, 1, 1])
        self.conv1 = paddle.nn.Conv3D(in_channels=32, out_channels=32, kernel_size=[1, 1, 1])
        self.conv2 = paddle.nn.Conv3D(in_channels=32, out_channels=128, kernel_size=[1, 1, 1], stride=[1, 2, 2])
        self.relu1 = paddle.nn.ReLU()
        self.conv3 = paddle.nn.Conv3D(in_channels=32, out_channels=32, kernel_size=[1, 3, 3], stride=[1, 2, 2], padding=[0, 1, 1])
        self.relu2 = paddle.nn.ReLU()
        self.conv4 = paddle.nn.Conv3D(in_channels=32, out_channels=128, kernel_size=[1, 1, 1])
        self.relu3 = paddle.nn.ReLU()
        self.conv5 = paddle.nn.Conv3D(in_channels=128, out_channels=32, kernel_size=[1, 1, 1])
        self.relu4 = paddle.nn.ReLU()
        self.conv6 = paddle.nn.Conv3D(in_channels=32, out_channels=32, kernel_size=[1, 3, 3], padding=[0, 1, 1])
        self.relu5 = paddle.nn.ReLU()
        self.conv7 = paddle.nn.Conv3D(in_channels=32, out_channels=128, kernel_size=[1, 1, 1])
        self.relu6 = paddle.nn.ReLU()
        self.conv8 = paddle.nn.Conv3D(in_channels=128, out_channels=32, kernel_size=[1, 1, 1])
        self.relu7 = paddle.nn.ReLU()
        self.conv9 = paddle.nn.Conv3D(in_channels=32, out_channels=32, kernel_size=[1, 3, 3], padding=[0, 1, 1])
        self.relu8 = paddle.nn.ReLU()
        self.conv10 = paddle.nn.Conv3D(in_channels=32, out_channels=128, kernel_size=[1, 1, 1])
        self.relu9 = paddle.nn.ReLU()
        self.conv11 = paddle.nn.Conv3D(in_channels=128, out_channels=32, kernel_size=[1, 1, 1])
        self.relu10 = paddle.nn.ReLU()
        self.conv12 = paddle.nn.Conv3D(in_channels=32, out_channels=32, kernel_size=[1, 3, 3], padding=[0, 1, 1])
        self.relu11 = paddle.nn.ReLU()
        self.conv13 = paddle.nn.Conv3D(in_channels=32, out_channels=128, kernel_size=[1, 1, 1])
        self.relu12 = paddle.nn.ReLU()
        self.conv14 = paddle.nn.Conv3D(in_channels=128, out_channels=64, kernel_size=[3, 1, 1], padding=[1, 0, 0])
        self.conv15 = paddle.nn.Conv3D(in_channels=128, out_channels=256, kernel_size=[1, 1, 1], stride=[1, 2, 2])
        self.relu13 = paddle.nn.ReLU()
        self.conv16 = paddle.nn.Conv3D(in_channels=64, out_channels=64, kernel_size=[1, 3, 3], stride=[1, 2, 2], padding=[0, 1, 1])
        self.relu14 = paddle.nn.ReLU()
        self.conv17 = paddle.nn.Conv3D(in_channels=64, out_channels=256, kernel_size=[1, 1, 1])
        self.relu15 = paddle.nn.ReLU()
        self.conv18 = paddle.nn.Conv3D(in_channels=256, out_channels=64, kernel_size=[3, 1, 1], padding=[1, 0, 0])
        self.relu16 = paddle.nn.ReLU()
        self.conv19 = paddle.nn.Conv3D(in_channels=64, out_channels=64, kernel_size=[1, 3, 3], padding=[0, 1, 1])
        self.relu17 = paddle.nn.ReLU()
        self.conv20 = paddle.nn.Conv3D(in_channels=64, out_channels=256, kernel_size=[1, 1, 1])
        self.relu18 = paddle.nn.ReLU()
        self.conv21 = paddle.nn.Conv3D(in_channels=256, out_channels=64, kernel_size=[3, 1, 1], padding=[1, 0, 0])
        self.relu19 = paddle.nn.ReLU()
        self.conv22 = paddle.nn.Conv3D(in_channels=64, out_channels=64, kernel_size=[1, 3, 3], padding=[0, 1, 1])
        self.relu20 = paddle.nn.ReLU()
        self.conv23 = paddle.nn.Conv3D(in_channels=64, out_channels=256, kernel_size=[1, 1, 1])
        self.relu21 = paddle.nn.ReLU()
        self.conv24 = paddle.nn.Conv3D(in_channels=256, out_channels=64, kernel_size=[3, 1, 1], padding=[1, 0, 0])
        self.relu22 = paddle.nn.ReLU()
        self.conv25 = paddle.nn.Conv3D(in_channels=64, out_channels=64, kernel_size=[1, 3, 3], padding=[0, 1, 1])
        self.relu23 = paddle.nn.ReLU()
        self.conv26 = paddle.nn.Conv3D(in_channels=64, out_channels=256, kernel_size=[1, 1, 1])
        self.relu24 = paddle.nn.ReLU()
        self.conv27 = paddle.nn.Conv3D(in_channels=256, out_channels=64, kernel_size=[3, 1, 1], padding=[1, 0, 0])
        self.relu25 = paddle.nn.ReLU()
        self.conv28 = paddle.nn.Conv3D(in_channels=64, out_channels=64, kernel_size=[1, 3, 3], padding=[0, 1, 1])
        self.relu26 = paddle.nn.ReLU()
        self.conv29 = paddle.nn.Conv3D(in_channels=64, out_channels=256, kernel_size=[1, 1, 1])
        self.relu27 = paddle.nn.ReLU()
        self.conv30 = paddle.nn.Conv3D(in_channels=256, out_channels=64, kernel_size=[3, 1, 1], padding=[1, 0, 0])
        self.relu28 = paddle.nn.ReLU()
        self.conv31 = paddle.nn.Conv3D(in_channels=64, out_channels=64, kernel_size=[1, 3, 3], padding=[0, 1, 1])
        self.relu29 = paddle.nn.ReLU()
        self.conv32 = paddle.nn.Conv3D(in_channels=64, out_channels=256, kernel_size=[1, 1, 1])
        self.relu30 = paddle.nn.ReLU()
        self.conv33 = paddle.nn.Conv3D(in_channels=256, out_channels=128, kernel_size=[3, 1, 1], padding=[1, 0, 0])
        self.conv34 = paddle.nn.Conv3D(in_channels=256, out_channels=512, kernel_size=[1, 1, 1], stride=2)
        self.relu31 = paddle.nn.ReLU()
        self.conv35 = paddle.nn.Conv3D(in_channels=128, out_channels=128, kernel_size=[1, 3, 3], stride=2, padding=[0, 1, 1])
        self.relu32 = paddle.nn.ReLU()
        self.conv36 = paddle.nn.Conv3D(in_channels=128, out_channels=512, kernel_size=[1, 1, 1])
        self.relu33 = paddle.nn.ReLU()
        self.conv37 = paddle.nn.Conv3D(in_channels=512, out_channels=128, kernel_size=[3, 1, 1], padding=[1, 0, 0])
        self.relu34 = paddle.nn.ReLU()
        self.conv38 = paddle.nn.Conv3D(in_channels=128, out_channels=128, kernel_size=[1, 3, 3], padding=[0, 1, 1])
        self.relu35 = paddle.nn.ReLU()
        self.conv39 = paddle.nn.Conv3D(in_channels=128, out_channels=512, kernel_size=[1, 1, 1])
        self.relu36 = paddle.nn.ReLU()
        self.conv40 = paddle.nn.Conv3D(in_channels=512, out_channels=128, kernel_size=[3, 1, 1], padding=[1, 0, 0])
        self.relu37 = paddle.nn.ReLU()
        self.conv41 = paddle.nn.Conv3D(in_channels=128, out_channels=128, kernel_size=[1, 3, 3], padding=[0, 1, 1])
        self.relu38 = paddle.nn.ReLU()
        self.conv42 = paddle.nn.Conv3D(in_channels=128, out_channels=512, kernel_size=[1, 1, 1])
        self.relu39 = paddle.nn.ReLU()
        self.pool1 = paddle.nn.AdaptiveAvgPool3D(output_size=[1, 1, 1])
        self.softmax0 = paddle.nn.Softmax(axis=2)

    def forward(self, x2paddle_imgs):
        x2paddle_cls_head_fc_cls_weight = self.x2paddle_cls_head_fc_cls_weight
        x2paddle_cls_head_fc_cls_bias = self.x2paddle_cls_head_fc_cls_bias
        x2paddle_578 = self.x2paddle_578
        x2paddle_579 = self.x2paddle_579
        x2paddle_580 = self.x2paddle_580
        x2paddle_262 = paddle.full(dtype='int64', shape=[1], fill_value=1)
        x2paddle_265 = paddle.full(dtype='int64', shape=[1], fill_value=2)
        x2paddle_268 = paddle.full(dtype='int64', shape=[1], fill_value=3)
        x2paddle_271 = paddle.full(dtype='int64', shape=[1], fill_value=4)
        x2paddle_274 = paddle.full(dtype='int64', shape=[1], fill_value=5)
        x2paddle_426 = paddle.full(dtype='int64', shape=[1], fill_value=0)
        x2paddle_435 = paddle.full(dtype='int64', shape=[1], fill_value=0)
        x2paddle_261 = paddle.shape(input=x2paddle_imgs)
        x2paddle_261 = paddle.cast(x=x2paddle_261, dtype='int64')
        x2paddle_264 = paddle.shape(input=x2paddle_imgs)
        x2paddle_264 = paddle.cast(x=x2paddle_264, dtype='int64')
        x2paddle_267 = paddle.shape(input=x2paddle_imgs)
        x2paddle_267 = paddle.cast(x=x2paddle_267, dtype='int64')
        x2paddle_270 = paddle.shape(input=x2paddle_imgs)
        x2paddle_270 = paddle.cast(x=x2paddle_270, dtype='int64')
        x2paddle_273 = paddle.shape(input=x2paddle_imgs)
        x2paddle_273 = paddle.cast(x=x2paddle_273, dtype='int64')
        x2paddle_263 = paddle.gather(x=x2paddle_261, index=x2paddle_262)
        x2paddle_266 = paddle.gather(x=x2paddle_264, index=x2paddle_265)
        x2paddle_269 = paddle.gather(x=x2paddle_267, index=x2paddle_268)
        x2paddle_272 = paddle.gather(x=x2paddle_270, index=x2paddle_271)
        x2paddle_275 = paddle.gather(x=x2paddle_273, index=x2paddle_274)
        x2paddle_442 = paddle.reshape(x=x2paddle_263, shape=[1])
        x2paddle_278 = paddle.reshape(x=x2paddle_266, shape=[1])
        x2paddle_279 = paddle.reshape(x=x2paddle_269, shape=[1])
        x2paddle_280 = paddle.reshape(x=x2paddle_272, shape=[1])
        x2paddle_281 = paddle.reshape(x=x2paddle_275, shape=[1])
        x2paddle_282 = paddle.concat(x=[x2paddle_578, x2paddle_278, x2paddle_279, x2paddle_280, x2paddle_281])
        x2paddle_283 = paddle.reshape(x=x2paddle_imgs, shape=[20, 25, 48, 64, 64])
        x2paddle_449 = self.conv0(x2paddle_283)
        x2paddle_286 = self.relu0(x2paddle_449)
        x2paddle_287 = self.pool0(x2paddle_286)
        x2paddle_452 = self.conv1(x2paddle_287)
        x2paddle_461 = self.conv2(x2paddle_287)
        x2paddle_290 = self.relu1(x2paddle_452)
        x2paddle_455 = self.conv3(x2paddle_290)
        x2paddle_293 = self.relu2(x2paddle_455)
        x2paddle_458 = self.conv4(x2paddle_293)
        x2paddle_298 = paddle.add(x=x2paddle_458, y=x2paddle_461)
        x2paddle_299 = self.relu3(x2paddle_298)
        x2paddle_464 = self.conv5(x2paddle_299)
        x2paddle_302 = self.relu4(x2paddle_464)
        x2paddle_467 = self.conv6(x2paddle_302)
        x2paddle_305 = self.relu5(x2paddle_467)
        x2paddle_470 = self.conv7(x2paddle_305)
        x2paddle_308 = paddle.add(x=x2paddle_470, y=x2paddle_299)
        x2paddle_309 = self.relu6(x2paddle_308)
        x2paddle_473 = self.conv8(x2paddle_309)
        x2paddle_312 = self.relu7(x2paddle_473)
        x2paddle_476 = self.conv9(x2paddle_312)
        x2paddle_315 = self.relu8(x2paddle_476)
        x2paddle_479 = self.conv10(x2paddle_315)
        x2paddle_318 = paddle.add(x=x2paddle_479, y=x2paddle_309)
        x2paddle_319 = self.relu9(x2paddle_318)
        x2paddle_482 = self.conv11(x2paddle_319)
        x2paddle_322 = self.relu10(x2paddle_482)
        x2paddle_485 = self.conv12(x2paddle_322)
        x2paddle_325 = self.relu11(x2paddle_485)
        x2paddle_488 = self.conv13(x2paddle_325)
        x2paddle_328 = paddle.add(x=x2paddle_488, y=x2paddle_319)
        x2paddle_329 = self.relu12(x2paddle_328)
        x2paddle_491 = self.conv14(x2paddle_329)
        x2paddle_500 = self.conv15(x2paddle_329)
        x2paddle_332 = self.relu13(x2paddle_491)
        x2paddle_494 = self.conv16(x2paddle_332)
        x2paddle_335 = self.relu14(x2paddle_494)
        x2paddle_497 = self.conv17(x2paddle_335)
        x2paddle_340 = paddle.add(x=x2paddle_497, y=x2paddle_500)
        x2paddle_341 = self.relu15(x2paddle_340)
        x2paddle_503 = self.conv18(x2paddle_341)
        x2paddle_344 = self.relu16(x2paddle_503)
        x2paddle_506 = self.conv19(x2paddle_344)
        x2paddle_347 = self.relu17(x2paddle_506)
        x2paddle_509 = self.conv20(x2paddle_347)
        x2paddle_350 = paddle.add(x=x2paddle_509, y=x2paddle_341)
        x2paddle_351 = self.relu18(x2paddle_350)
        x2paddle_512 = self.conv21(x2paddle_351)
        x2paddle_354 = self.relu19(x2paddle_512)
        x2paddle_515 = self.conv22(x2paddle_354)
        x2paddle_357 = self.relu20(x2paddle_515)
        x2paddle_518 = self.conv23(x2paddle_357)
        x2paddle_360 = paddle.add(x=x2paddle_518, y=x2paddle_351)
        x2paddle_361 = self.relu21(x2paddle_360)
        x2paddle_521 = self.conv24(x2paddle_361)
        x2paddle_364 = self.relu22(x2paddle_521)
        x2paddle_524 = self.conv25(x2paddle_364)
        x2paddle_367 = self.relu23(x2paddle_524)
        x2paddle_527 = self.conv26(x2paddle_367)
        x2paddle_370 = paddle.add(x=x2paddle_527, y=x2paddle_361)
        x2paddle_371 = self.relu24(x2paddle_370)
        x2paddle_530 = self.conv27(x2paddle_371)
        x2paddle_374 = self.relu25(x2paddle_530)
        x2paddle_533 = self.conv28(x2paddle_374)
        x2paddle_377 = self.relu26(x2paddle_533)
        x2paddle_536 = self.conv29(x2paddle_377)
        x2paddle_380 = paddle.add(x=x2paddle_536, y=x2paddle_371)
        x2paddle_381 = self.relu27(x2paddle_380)
        x2paddle_539 = self.conv30(x2paddle_381)
        x2paddle_384 = self.relu28(x2paddle_539)
        x2paddle_542 = self.conv31(x2paddle_384)
        x2paddle_387 = self.relu29(x2paddle_542)
        x2paddle_545 = self.conv32(x2paddle_387)
        x2paddle_390 = paddle.add(x=x2paddle_545, y=x2paddle_381)
        x2paddle_391 = self.relu30(x2paddle_390)
        x2paddle_548 = self.conv33(x2paddle_391)
        x2paddle_557 = self.conv34(x2paddle_391)
        x2paddle_394 = self.relu31(x2paddle_548)
        x2paddle_551 = self.conv35(x2paddle_394)
        x2paddle_397 = self.relu32(x2paddle_551)
        x2paddle_554 = self.conv36(x2paddle_397)
        x2paddle_402 = paddle.add(x=x2paddle_554, y=x2paddle_557)
        x2paddle_403 = self.relu33(x2paddle_402)
        x2paddle_560 = self.conv37(x2paddle_403)
        x2paddle_406 = self.relu34(x2paddle_560)
        x2paddle_563 = self.conv38(x2paddle_406)
        x2paddle_409 = self.relu35(x2paddle_563)
        x2paddle_566 = self.conv39(x2paddle_409)
        x2paddle_412 = paddle.add(x=x2paddle_566, y=x2paddle_403)
        x2paddle_413 = self.relu36(x2paddle_412)
        x2paddle_569 = self.conv40(x2paddle_413)
        x2paddle_416 = self.relu37(x2paddle_569)
        x2paddle_572 = self.conv41(x2paddle_416)
        x2paddle_419 = self.relu38(x2paddle_572)
        x2paddle_575 = self.conv42(x2paddle_419)
        x2paddle_422 = paddle.add(x=x2paddle_575, y=x2paddle_413)
        x2paddle_423 = self.relu39(x2paddle_422)
        x2paddle_424 = self.pool1(x2paddle_423)
        x2paddle_425 = paddle.shape(input=x2paddle_424)
        x2paddle_425 = paddle.cast(x=x2paddle_425, dtype='int64')
        x2paddle_427 = paddle.gather(x=x2paddle_425, index=x2paddle_426)
        x2paddle_429 = paddle.reshape(x=x2paddle_427, shape=[1])
        x2paddle_431 = paddle.concat(x=[x2paddle_429, x2paddle_579])
        x2paddle_432 = paddle.reshape(x=x2paddle_424, shape=[20, 512])
        x2paddle_433_mm = paddle.matmul(x=x2paddle_432, y=x2paddle_cls_head_fc_cls_weight, transpose_y=True)
        x2paddle_433_mm = paddle.scale(x=x2paddle_433_mm)
        x2paddle_433 = paddle.add(x=x2paddle_433_mm, y=x2paddle_cls_head_fc_cls_bias)
        x2paddle_434 = paddle.shape(input=x2paddle_433)
        x2paddle_434 = paddle.cast(x=x2paddle_434, dtype='int64')
        x2paddle_436 = paddle.gather(x=x2paddle_434, index=x2paddle_435)
        x2paddle_437 = paddle.divide(x=x2paddle_436, y=x2paddle_263)
        x2paddle_438 = paddle.cast(x=x2paddle_437, dtype='int64')
        x2paddle_439 = paddle.cast(x=x2paddle_438, dtype='int64')
        x2paddle_441 = paddle.reshape(x=x2paddle_439, shape=[1])
        x2paddle_444 = paddle.concat(x=[x2paddle_441, x2paddle_442, x2paddle_580])
        x2paddle_445 = paddle.reshape(x=x2paddle_433, shape=[1, 20, 30])
        x2paddle_446 = self.softmax0(x2paddle_445)
        x2paddle_447 = paddle.mean(x=x2paddle_446, axis=[1])
        x2paddle_448 = paddle.cast(x=x2paddle_447, dtype='float32')
        return x2paddle_448

def main(x2paddle_imgs):
    # There are 1 inputs.
    # x2paddle_imgs: shape-[1, 20, 25, 48, 64, 64], type-float32.
    paddle.disable_static()
    params = paddle.load(r'/home/wuhao/workspace/onnx_workdir/pd_clean/model.pdparams')
    model = ONNXModel()
    model.set_dict(params, use_structured_name=True)
    model.eval()
    out = model(x2paddle_imgs)
    return out
